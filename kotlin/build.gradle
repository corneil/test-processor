import org.gradle.api.DefaultTask
import org.gradle.api.file.RegularFileProperty
import org.apache.commons.text.StringEscapeUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.commons:commons-text:1.12.0'
        if ('true' == project.findProperty('useNative')) {
            classpath 'org.graalvm.buildtools:native-gradle-plugin:0.10.2'
        }
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.jetbrains.kotlin.kapt' version '1.9.25'
}
if ('true' == project.findProperty('useNative')) {
    apply plugin: 'org.graalvm.buildtools.native'
    logger.lifecycle('importing native plugins')
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

ext {
    set('springCloudVersion', "2023.0.3")
}
repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.cloud:spring-cloud-function-web'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.springframework.kafka:spring-kafka'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    kapt 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:kafka'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform {
        def tag = findProperty("tag")
        if (tag) {
            includeTags tag
        }
        forkEvery Integer.parseInt(project.findProperty('fork') ?: "1")
    }
    testLogging {
        showStandardStreams = true
        events('standardOut', 'started', 'passed', 'skipped', 'failed')
    }
    reports {
        junitXml.outputLocation = layout.buildDirectory.dir("test-junit-xml")
    }
}

bootBuildImage {
    pullPolicy = 'IF_NOT_PRESENT'
    imageName = "${project.name}:latest"
}
